/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.workshop.holiday.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.workshop.holiday.sb.model.Holiday;
import com.liferay.workshop.holiday.sb.model.HolidayModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Holiday service. Represents a row in the &quot;HOLIDAY_Holiday&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HolidayModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HolidayImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HolidayImpl
 * @generated
 */
public class HolidayModelImpl
	extends BaseModelImpl<Holiday> implements HolidayModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a holiday model instance should use the <code>Holiday</code> interface instead.
	 */
	public static final String TABLE_NAME = "HOLIDAY_Holiday";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"holidayRequestId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"dateRequest", Types.VARCHAR},
		{"isHoliday", Types.BOOLEAN}, {"holidayName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("holidayRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isHoliday", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("holidayName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HOLIDAY_Holiday (uuid_ VARCHAR(75) null,holidayRequestId LONG not null primary key,createDate DATE null,dateRequest VARCHAR(75) null,isHoliday BOOLEAN,holidayName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table HOLIDAY_Holiday";

	public static final String ORDER_BY_JPQL =
		" ORDER BY holiday.dateRequest ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HOLIDAY_Holiday.dateRequest ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATEREQUEST_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HolidayModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _holidayRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHolidayRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _holidayRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Holiday.class;
	}

	@Override
	public String getModelClassName() {
		return Holiday.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Holiday, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Holiday, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Holiday, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Holiday)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Holiday, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Holiday, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Holiday)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Holiday, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Holiday, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Holiday, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Holiday, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Holiday, Object>>();

			attributeGetterFunctions.put("uuid", Holiday::getUuid);
			attributeGetterFunctions.put(
				"holidayRequestId", Holiday::getHolidayRequestId);
			attributeGetterFunctions.put("createDate", Holiday::getCreateDate);
			attributeGetterFunctions.put(
				"dateRequest", Holiday::getDateRequest);
			attributeGetterFunctions.put("isHoliday", Holiday::getIsHoliday);
			attributeGetterFunctions.put(
				"holidayName", Holiday::getHolidayName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Holiday, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Holiday, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Holiday, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Holiday, String>)Holiday::setUuid);
			attributeSetterBiConsumers.put(
				"holidayRequestId",
				(BiConsumer<Holiday, Long>)Holiday::setHolidayRequestId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Holiday, Date>)Holiday::setCreateDate);
			attributeSetterBiConsumers.put(
				"dateRequest",
				(BiConsumer<Holiday, String>)Holiday::setDateRequest);
			attributeSetterBiConsumers.put(
				"isHoliday",
				(BiConsumer<Holiday, Boolean>)Holiday::setIsHoliday);
			attributeSetterBiConsumers.put(
				"holidayName",
				(BiConsumer<Holiday, String>)Holiday::setHolidayName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getHolidayRequestId() {
		return _holidayRequestId;
	}

	@Override
	public void setHolidayRequestId(long holidayRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_holidayRequestId = holidayRequestId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public String getDateRequest() {
		if (_dateRequest == null) {
			return "";
		}
		else {
			return _dateRequest;
		}
	}

	@Override
	public void setDateRequest(String dateRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateRequest = dateRequest;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDateRequest() {
		return getColumnOriginalValue("dateRequest");
	}

	@Override
	public boolean getIsHoliday() {
		return _isHoliday;
	}

	@Override
	public boolean isIsHoliday() {
		return _isHoliday;
	}

	@Override
	public void setIsHoliday(boolean isHoliday) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isHoliday = isHoliday;
	}

	@Override
	public String getHolidayName() {
		if (_holidayName == null) {
			return "";
		}
		else {
			return _holidayName;
		}
	}

	@Override
	public void setHolidayName(String holidayName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_holidayName = holidayName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Holiday.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Holiday toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Holiday>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HolidayImpl holidayImpl = new HolidayImpl();

		holidayImpl.setUuid(getUuid());
		holidayImpl.setHolidayRequestId(getHolidayRequestId());
		holidayImpl.setCreateDate(getCreateDate());
		holidayImpl.setDateRequest(getDateRequest());
		holidayImpl.setIsHoliday(isIsHoliday());
		holidayImpl.setHolidayName(getHolidayName());

		holidayImpl.resetOriginalValues();

		return holidayImpl;
	}

	@Override
	public Holiday cloneWithOriginalValues() {
		HolidayImpl holidayImpl = new HolidayImpl();

		holidayImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		holidayImpl.setHolidayRequestId(
			this.<Long>getColumnOriginalValue("holidayRequestId"));
		holidayImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		holidayImpl.setDateRequest(
			this.<String>getColumnOriginalValue("dateRequest"));
		holidayImpl.setIsHoliday(
			this.<Boolean>getColumnOriginalValue("isHoliday"));
		holidayImpl.setHolidayName(
			this.<String>getColumnOriginalValue("holidayName"));

		return holidayImpl;
	}

	@Override
	public int compareTo(Holiday holiday) {
		int value = 0;

		value = getDateRequest().compareTo(holiday.getDateRequest());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Holiday)) {
			return false;
		}

		Holiday holiday = (Holiday)object;

		long primaryKey = holiday.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Holiday> toCacheModel() {
		HolidayCacheModel holidayCacheModel = new HolidayCacheModel();

		holidayCacheModel.uuid = getUuid();

		String uuid = holidayCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			holidayCacheModel.uuid = null;
		}

		holidayCacheModel.holidayRequestId = getHolidayRequestId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			holidayCacheModel.createDate = createDate.getTime();
		}
		else {
			holidayCacheModel.createDate = Long.MIN_VALUE;
		}

		holidayCacheModel.dateRequest = getDateRequest();

		String dateRequest = holidayCacheModel.dateRequest;

		if ((dateRequest != null) && (dateRequest.length() == 0)) {
			holidayCacheModel.dateRequest = null;
		}

		holidayCacheModel.isHoliday = isIsHoliday();

		holidayCacheModel.holidayName = getHolidayName();

		String holidayName = holidayCacheModel.holidayName;

		if ((holidayName != null) && (holidayName.length() == 0)) {
			holidayCacheModel.holidayName = null;
		}

		return holidayCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Holiday, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Holiday, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Holiday, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Holiday)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Holiday>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Holiday.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _holidayRequestId;
	private Date _createDate;
	private String _dateRequest;
	private boolean _isHoliday;
	private String _holidayName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Holiday, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Holiday)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("holidayRequestId", _holidayRequestId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("dateRequest", _dateRequest);
		_columnOriginalValues.put("isHoliday", _isHoliday);
		_columnOriginalValues.put("holidayName", _holidayName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("holidayRequestId", 2L);

		columnBitmasks.put("createDate", 4L);

		columnBitmasks.put("dateRequest", 8L);

		columnBitmasks.put("isHoliday", 16L);

		columnBitmasks.put("holidayName", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Holiday _escapedModel;

}